========================
Git Cheatsheet
========================

一、初始化与删除仓库
------------------------
git init                           # 初始化本地仓库
rm -rf .git                        # 删除本地仓库（彻底清空版本控制）
rm -rf Terminal/.git               # 删除子目录里的 git 仓库
git config advice.forceDeleteBranch false
git config --global init.defaultBranch <name>   # 设置默认初始分支名
git branch -m <name>               # 重命名当前分支

二、分支管理
------------------------
git branch                         # 查看本地分支
git branch -r                       # 查看远程分支
git branch <name>                   # 创建新分支
git branch -d <name>                # 删除已合并的本地分支
git branch -D <name>                # 强制删除本地分支
git checkout <branch>               # 切换到分支
git checkout <commitID>             # 切换到特定提交（分离 HEAD）
git checkout -b <new-branch>        # 创建并切换到新分支
git checkout -b <new-branch> <commitID>  # 从指定 commit 创建分支
git checkout --orphan <branchName>  # 创建孤儿分支（无历史）

三、查看仓库状态
------------------------
git status                         # 查看当前仓库状态
git log --oneline                  # 压缩形式查看提交历史
git log --oneline --all --graph --decorate  # 带分支结构的图形化提交历史
git reflog                         # 查看 HEAD 和分支的移动历史（包括 reset、checkout 等操作）
git ls-files                        # 查看 Git 跟踪的文件
git diff                             # 查看工作区未暂存的修改
git diff <commitA> <commitB>         # 比较两个 commit 的差异
git diff <branchA> <branchB>         # 比较两个分支的差异

四、暂存与提交
------------------------
git add .                          # 添加所有修改（新文件/改动/删除）到暂存区
git add <file>                     # 添加指定文件到暂存区
git rm <file>                      # 删除文件并记录到暂存区
git rm -rf .                        # 删除所有文件
git commit -m "message"            # 提交暂存区内容
git commit -a -m "message"         # 跳过 git add，直接提交已修改过的文件（不包含新文件）

五、回退与修改历史
------------------------
git reset --soft <commitID>        # 软回退，保留暂存区修改
git reset --mixed <commitID>       # 默认回退，保留工作区修改，清空暂存区
git reset --hard <commitID>        # 硬回退，丢弃工作区和暂存区修改
git checkout <commitID>            # 游离 HEAD 到某个 commit（不修改分支指针）
git rebase <branch>                # 将当前分支的提交移到目标分支最后
git diff <commitA> <commitB>       # 比较两个 commit 的差异

六、远程仓库操作
------------------------
git remote -v                      # 查看远程地址
git remote add origin <url>        # 添加远程仓库
git remote set-url origin <url>    # 修改远程仓库地址
git push -u origin main            # 首次推送并绑定分支
git push                           # 推送到已绑定的远程分支
git push origin <branch>           # 推送指定分支到远程
git push -f origin main            # 强制推送，覆盖远程 main
git push -f origin <local>:<remote> # 强制推送，本地分支覆盖远程目标分支
git pull origin main --rebase      # 拉取远程最新代码并 rebase
git pull                            # 拉取远程最新代码并合并

七、子模块 / 嵌套仓库
------------------------
git rm --cached Terminal           # 移除误加的子仓库

八、清理与维护
------------------------
git gc                              # 垃圾回收，清理未引用的提交或对象
git config --global pager.branch false  # 关闭分支分页显示
git config --global pager.reflog false  # 关闭 reflog 分页显示